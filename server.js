// 1. Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
const express = require('express');
const http = require('http');
const path = require('path');
const { Server } = require("socket.io");
const cors = require('cors');

// *** TH√äM C√ÅC TR√åNH DEBUG ***
const debugServer = require('debug')('app:server');
const debugSocket = require('debug')('app:socket');

// 2. Kh·ªüi t·∫°o
const app = express();
app.use(cors());
app.use(express.json()); // <-- Th√™m middleware ƒë·ªÉ parse JSON body t·ª´ PHP

// Th√™m route ƒë·ªÉ test server
app.get('/', (req, res) => {
  res.send('Viegrand Chat Server is running!');
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    connectedUsers: Object.keys(userSockets).length
  });
});

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  allowEIO3: true,
  transports: ['websocket', 'polling']
});

const PORT = process.env.PORT || 3000;
const NOTIFY_SECRET = 'viegrand_super_secret_key_for_php_2025'; // <-- Secret key ƒë·ªÉ PHP g·ªçi

// L∆∞u tr·ªØ map gi·ªØa user phone v√† socket id
const userSockets = {};

// 3. L·∫Øng nghe c√°c s·ª± ki·ªán c·ªßa Socket.IO
io.on('connection', (socket) => {
  debugSocket(`M·ªôt ng∆∞·ªùi d√πng ƒë√£ k·∫øt n·ªëi: ${socket.id}`);

  // S·ª± ki·ªán ƒëƒÉng k√Ω user v·ªõi SƒêT
  socket.on('register', (phone) => {
    console.log('üîç Server received register:', phone, typeof phone);
    
    if (phone) {
      // X·ª≠ l√Ω c·∫£ object v√† string
      const phoneNumber = typeof phone === 'object' ? phone.phone : phone;
      
      if (phoneNumber) {
        userSockets[phoneNumber] = socket.id;
        debugSocket(`Ng∆∞·ªùi d√πng v·ªõi SƒêT ${phoneNumber} ƒë√£ ƒëƒÉng k√Ω v·ªõi socket id ${socket.id}`);
        console.log('üìã Current userSockets:', userSockets);
      }
    }
  });

  socket.on('disconnect', () => {
    // X√≥a user kh·ªèi map khi h·ªç ng·∫Øt k·∫øt n·ªëi
    for (const phone in userSockets) {
      if (userSockets[phone] === socket.id) {
        delete userSockets[phone];
        debugSocket(`Ng∆∞·ªùi d√πng v·ªõi SƒêT ${phone} ƒë√£ ng·∫Øt k·∫øt n·ªëi: ${socket.id}`);
        break;
      }
    }
  });

  // Event c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
  socket.on('chat message', (msg) => {
    console.log('üîç Server received chat message:', msg);
    
    if (typeof msg === 'string') {
      // Tin nh·∫Øn ƒë∆°n gi·∫£n
      debugSocket(`Tin nh·∫Øn t·ª´ ${socket.id}: ${msg}`);
      io.emit('chat message', msg);
    } else {
      // Tin nh·∫Øn c√≥ c·∫•u tr√∫c t·ª´ web
      const { sender, message, timestamp } = msg;
      debugSocket(`Tin nh·∫Øn t·ª´ ${sender}: ${message}`);
      
      // G·ª≠i tin nh·∫Øn ƒë·∫øn app (0000000001)
      const appSocketId = userSockets['0000000001'];
      if (appSocketId) {
        const messageData = {
          conversationId: 'conv_1fd7e09c6c647f98a9aaabed96b60327',
          sender: sender,
          receiver: '0000000001',
          message: message,
          messageText: message, // Th√™m field n√†y cho app
          timestamp: timestamp
        };
        
        io.to(appSocketId).emit('chat message', messageData);
        console.log('‚úÖ Message sent from web to app with format:', messageData);
      }
    }
  });

  // Event m·ªõi - Join conversation room
  socket.on('join conversation', (data) => {
    const { conversation_id } = data;
    if (conversation_id) {
      socket.join(conversation_id);
      debugSocket(`User ${socket.id} joined conversation: ${conversation_id}`);
    }
  });

  // Heartbeat ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
  socket.on('heartbeat', (data) => {
    const { phone } = data;
    if (phone && userSockets[phone] === socket.id) {
      console.log(`üíì Heartbeat from ${phone}`);
      socket.emit('heartbeat_ack', { timestamp: Date.now() });
    }
  });

  // Event m·ªõi - Send message trong conversation
  socket.on('send message', (data) => {
    console.log('üîç Server received send message data:', data);
    
    const { conversationId, senderPhone, receiverPhone, messageText, timestamp } = data;
    
    debugSocket(`Send message from ${senderPhone} to ${receiverPhone}:`, {
      conversationId,
      sender: senderPhone,
      receiver: receiverPhone,
      message: messageText
    });

    // T·∫°o tin nh·∫Øn ƒë·ªÉ g·ª≠i
    const messageData = {
      conversationId,
      sender: senderPhone,
      receiver: receiverPhone,
      message: messageText,
      timestamp: timestamp || new Date().toISOString()
    };

    // G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp ƒë·∫øn receiver
    const receiverSocketId = userSockets[receiverPhone];
    console.log('üîç Looking for receiver:', receiverPhone);
    console.log('üìã Available users:', Object.keys(userSockets));
    
    if (receiverSocketId) {
      // G·ª≠i v·ªõi format ƒë∆°n gi·∫£n cho web
      const simpleMessage = {
        sender: senderPhone,
        message: messageText,
        timestamp: timestamp || new Date().toISOString()
      };
      
      io.to(receiverSocketId).emit('chat message', simpleMessage);
      debugSocket(`Message sent to ${receiverPhone} (socket: ${receiverSocketId})`);
      console.log('‚úÖ Message sent to receiver with format:', simpleMessage);
    } else {
      debugSocket(`Receiver ${receiverPhone} not found in userSockets`);
      console.log('‚ùå Receiver not found in userSockets');
    }

    // C≈©ng emit cho conversation room n·∫øu c√≥
    if (conversationId) {
      socket.to(conversationId).emit('chat message', messageData);
      debugSocket(`Message also sent to conversation room: ${conversationId}`);
    }
  });

  // Event m·ªõi - Mark message as read
  socket.on('mark message read', (data) => {
    const { conversation_id, message_id, user_phone } = data;
    
    debugSocket(`Mark message as read:`, {
      conversation_id,
      message_id,
      user_phone
    });

    // Emit cho t·∫•t c·∫£ ng∆∞·ªùi trong conversation
    socket.to(conversation_id).emit('message read', {
      conversation_id,
      message_id,
      read_by: user_phone,
      read_at: new Date().toISOString()
    });
  });
});

// 4. Endpoint ƒë·ªÉ PHP g·ªçi ƒë·∫øn v√† k√≠ch ho·∫°t th√¥ng b√°o
app.post('/notify', (req, res) => {
  const { to_phone, payload, secret } = req.body;

  debugServer('Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu th√¥ng b√°o:', req.body);

  // B·∫£o m·∫≠t c∆° b·∫£n
  if (secret !== NOTIFY_SECRET) {
    debugServer('L·ªói: Sai secret key.');
    return res.status(403).json({ success: false, error: 'Forbidden' });
  }

  if (!to_phone || !payload) {
    debugServer('L·ªói: Thi·∫øu to_phone ho·∫∑c payload.');
    return res.status(400).json({ success: false, error: 'Missing to_phone or payload' });
  }

  const socketId = userSockets[to_phone];
  if (socketId) {
    io.to(socketId).emit('notification', payload);
    debugServer(`üì± Th√¥ng b√°o real-time ƒë√£ g·ª≠i cho ${to_phone} (socket: ${socketId})`);
    res.json({ success: true, message: `Notification sent to ${to_phone}`, delivered: true });
  } else {
    debugServer(`üíæ User ${to_phone} offline, th√¥ng b√°o ƒë√£ l∆∞u DB ƒë·ªÉ xem sau`);
    res.json({ success: true, message: `User ${to_phone} offline, notification stored`, delivered: false });
  }
});

// 5. Ph·ª•c v·ª• file index.html
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// 6. Kh·ªüi ƒë·ªông server
server.listen(PORT, '0.0.0.0', () => {
  debugServer(`Server ƒëang l·∫Øng nghe tr√™n http://0.0.0.0:${PORT}`);
  debugServer('B·∫°n c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c thi·∫øt b·ªã kh√°c trong c√πng m·∫°ng!');
});